using System;
using System.Collections.Generic;

namespace LiveSplit.SaltSanctuary.Memory
{
	using SearchMap = Dictionary<PointerTypes, string>; 

	public enum PointerTypes
	{
		CharacterManager,
		Gamestate,
		MonsterCatalogue,
		PlayerManager
	}

	public class ProgramPointer
	{
		private static SearchMap searchMap = new SearchMap
		{
			{ PointerTypes.CharacterManager, "558BEC57565383EC0C33C08945E88BF18B0D????????E8????????B9????????E8????????8BF8B9????????E8????????8BD88BCBE8????????8D5708E8????????8D15????????E8????????8B0D????????3909FF15|1035" },
			{ PointerTypes.MonsterCatalogue, "558BEC57565383EC0C33C08945E88BF18B0D????????E8????????B9????????E8????????8BF8B9????????E8????????8BD88BCBE8????????8D5708E8????????8D15????????E8????????8B0D????????3909FF15|618" },
			{ PointerTypes.Gamestate, "D905????????D8461CD95E1C8B4E048B46143B41040F83????????8B4481088B78148B56203BFA74183B51040F83????????8B4491088B401485C07C163BC77512D905????????D80D|12" },
			{ PointerTypes.PlayerManager,  "558BEC57565383EC0C33C08945E88BF18B0D????????E8????????B9????????E8????????8BF8B9????????E8????????8BD88BCBE8????????8D5708E8????????8D15????????E8????????8B0D????????3909FF15|893" }
		};

		private SaltMemory memory;	
		private IntPtr pointer;
		private DateTime lastTry;

		private int processID;
		private string searchStrings;
		private bool isStatic;


		public ProgramPointer(SaltMemory memory, PointerTypes pointerType, bool isStatic)
		{
			this.memory = memory;
			this.isStatic = isStatic;

			searchStrings = searchMap[pointerType];
			processID = memory.Process?.Id ?? -1;
			lastTry = DateTime.MinValue;
		}

		public IntPtr Value
		{
			get
			{
				if (!memory.IsHooked)
				{
					pointer = IntPtr.Zero;
				}
				else
				{
					GetPointer(ref pointer);
				}

				return pointer;
			}
		}

		public T Read<T>(params int[] offsets)
		{
			if (!memory.IsHooked)
			{
				return default(T);
			}

			return memory.Process.Read<T>(Value, offsets);
		}

		public string ReadString(params int[] offsets)
		{
			if (!memory.IsHooked)
			{
				return string.Empty;
			}

			IntPtr pointer = memory.Process.Read<IntPtr>(Value, offsets);

			return memory.Process.GetString(pointer);
		}

		public void Write<T>(T value, params int[] offsets)
		{
			if (!memory.IsHooked)
			{
				return;
			}

			memory.Process.Write(Value, value, offsets);
		}

		private void GetPointer(ref IntPtr pointer)
		{
			if (memory.Process.Id != processID)
			{
				pointer = IntPtr.Zero;
				processID = memory.Process.Id;
			}

			if (pointer == IntPtr.Zero && DateTime.Now > lastTry.AddSeconds(1))
			{
				lastTry = DateTime.Now;
				pointer = memory.Process.FindSignatures(searchStrings)[0];

				if (pointer != IntPtr.Zero)
				{
					pointer = isStatic ? memory.Process.Read<IntPtr>(pointer, 0, 0) : memory.Process.Read<IntPtr>(pointer, 0);
				}
			}
		}
	}
}
